"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4699],{7975:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>g});var i=e(5893),o=e(1151);const a={title:"Creating Configurations",tags:["Content Issues"]},r="Creating Configurations",s={id:"integration-manager/configurations/creating-configurations",title:"Creating Configurations",description:"A configuration is a set of properties and parameters that specify when, where, and how an integration will be executed. Configurations contain references to a specific integration, the location in which the integration will be executed, and the frequency at which executions will occur.",source:"@site/docs/integration-manager/configurations/creating-configurations.md",sourceDirName:"integration-manager/configurations",slug:"/integration-manager/configurations/creating-configurations",permalink:"/integration-platform-docs/docs/integration-manager/configurations/creating-configurations",draft:!1,unlisted:!1,editUrl:"https://github.com/douglaslloyd/integration-platform-docs/tree/main/docs/integration-manager/configurations/creating-configurations.md",tags:[{label:"Content Issues",permalink:"/integration-platform-docs/docs/tags/content-issues"}],version:"current",lastUpdatedAt:1700339310,formattedLastUpdatedAt:"Nov 18, 2023",frontMatter:{title:"Creating Configurations",tags:["Content Issues"]},sidebar:"docsSidebar",previous:{title:"Downloading the Log File",permalink:"/integration-platform-docs/docs/integration-manager/jobs/downloading-the-log-file"},next:{title:"Editing Configuration Details",permalink:"/integration-platform-docs/docs/integration-manager/configurations/editing-configuration-details"}},c={},g=[{value:"Importing a Configuration",id:"importing-a-configuration",level:2},{value:"Creating a Configuration from a Template",id:"creating-a-configuration-from-a-template",level:2},{value:"Auto-Generating a Configuration",id:"auto-generating-a-configuration",level:2}];function u(n){const t={a:"a",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"creating-configurations",children:"Creating Configurations"}),"\n",(0,i.jsx)(t.p,{children:"A configuration is a set of properties and parameters that specify when, where, and how an integration will be executed. Configurations contain references to a specific integration, the location in which the integration will be executed, and the frequency at which executions will occur."}),"\n",(0,i.jsx)(t.p,{children:"You can create configurations using any of the following methods."}),"\n",(0,i.jsx)(t.h2,{id:"importing-a-configuration",children:"Importing a Configuration"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)("font",{color:"red",children:"Why is it that when you create your first configuration, you are taken to the Import Configuration page and you upload a config file, but thereafter you only need to name the configuration and have to upload the package from the Setup page"})})}),"\n",(0,i.jsx)(t.h2,{id:"creating-a-configuration-from-a-template",children:"Creating a Configuration from a Template"}),"\n",(0,i.jsxs)(t.p,{children:["Using templates makes it easier to manage multiple configurations. You can create a configuration from the ",(0,i.jsx)(t.strong,{children:"Template Details"})," page. Refer to ",(0,i.jsx)(t.a,{href:"../templates/creating-a-configuration-from-a-template",children:"Creating a Configuration from a Template"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"auto-generating-a-configuration",children:"Auto-Generating a Configuration"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:(0,i.jsx)("font",{color:"red",children:"Discuss the Auto-Generate Configuruation checkbox?"})})})]})}function l(n={}){const{wrapper:t}={...(0,o.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},1151:(n,t,e)=>{e.d(t,{Z:()=>s,a:()=>r});var i=e(7294);const o={},a=i.createContext(o);function r(n){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:t},n.children)}}}]);